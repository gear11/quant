schema {
    query: Query
    subscription: Subscription
    mutation: Mutation
}

type Query {
    listSymbols: SymbolResult!
    getWatchList: WatchListResult!
    searchSymbols(query: String!): SymbolSearchResult!
}

type Subscription {
    counter: CounterResult!
    tickBars: TickBarResult!
}

type Mutation {
    addSymbol(symbol: String!): WatchListResult!
    removeSymbol(symbol: String!): WatchListResult!
}

type SymbolInfo {
    symbol: String!
    company_name: String!
    industry: String
    type: String!
    exchange: String!
    rank: Int
}

type SymbolSearchResult {
    success: Boolean!
    errors: [String]
    symbols: [SymbolInfo]
}

type SymbolResult {
    success: Boolean!
    errors: [String]
    symbols: [Symbol]
}

type WatchListResult {
    success: Boolean!
    errors: [String]
    items: [TickBar]
}

type CounterResult {
    success: Boolean!
    errors: [String]
    count: Int
}

type TickBarResult {
    success: Boolean!
    errors: [String]
    tickBar: TickBar
}

type Symbol {
    name: String!
}

scalar DateTime

type TickBar {
    symbol: String!
    date: DateTime!
    open: Float!
    high: Float!
    low: Float!
    close: Float!
    wap: Float!
    volume: Int!
}

